{"version":3,"file":"static/js/main.b609faca.js","mappings":"mBAOA,MAUaA,EAAYC,UACvB,IACE,MAAMC,QAAiBC,MAAM,aAE7B,aADoCD,EAASE,MAE/C,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,uBAAwBA,GAChCA,CACR,GA4BFL,IAAYO,MAAKC,GAAQF,QAAQG,IAAID,I","sources":["index.ts"],"sourcesContent":["// src/index.ts\n\n// Тип для данных, которые мы получаем с API\ntype RESPONSE_DATA = {\n  greeting: string;\n};\n\nconst getJson = async <T>(endpoint: ENDPOINTS): Promise<T> => {\n  const path = process.env.NODE_ENV === 'development'\n      ? `http://localhost:3001/api/${endpoint}`\n      : `https://raw.githubusercontent.com/robzarel/gh-pages-demo/gh-pages/static/db/${endpoint}.json`;\n  const response = await fetch(path);\n\n  return await response.json();\n}; \n\n// Функция для получения данных с API\nexport const fetchData = async (): Promise<RESPONSE_DATA> => {\n  try {\n    const response = await fetch('/api/data');  // Запрос к серверу через прокси\n    const result: RESPONSE_DATA = await response.json();  // Преобразуем результат в тип RESPONSE_DATA\n    return result;  // Возвращаем данные\n  } catch (error) {\n    console.error('Error fetching data:', error);  // Обработка ошибок\n    throw error;  // Прокидываем ошибку дальше\n  }\n};\n\n// Тип для эндпоинтов\ntype ENDPOINTS = 'data';  // Или создайте другие эндпоинты, если нужно\n\n// Объект API с методом для получения данных\ntype API = {\n  get: {\n    data: () => Promise<RESPONSE_DATA>;\n  };\n};\n\n// Реализация объекта API\nconst api: API = {\n  get: {\n    data: async () => {\n      const result = await fetchData();  // Используем fetchData для получения данных\n      return result;\n    },\n  },\n};\n\n// Экспортируем типы и API\nexport type { RESPONSE_DATA, ENDPOINTS };\nexport default api;\n\n// Пример вызова fetchData\nfetchData().then(data => console.log(data));  // Логируем полученные данные\n\n"],"names":["fetchData","async","response","fetch","json","error","console","then","data","log"],"sourceRoot":""}